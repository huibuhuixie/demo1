#1 深拷贝带随机指针的链表
"""
# Definition for a Node.
class Node:
    def __init__(self, x, next=None, random=None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if head == None:
            return None
        cur = head
        newhead = Node(0)
        cur1 = newhead
        while cur != None:
            cur1.next = Node(cur.val)
            cur = cur.next
            cur1 = cur1.next
        cur = head
        cur1 = newhead.next
        while cur:
            index = 0
            if cur.random:
                temp1= head
                while temp1 != cur.random:
                    index += 1
                    temp1 = temp1.next
                temp2 = newhead.next
                while index > 0:
                    temp2 = temp2.next
                    index -= 1
                cur1.random = temp2
            cur = cur.next
            cur1 = cur1.next
        return newhead.next
# 2 旋转列表 先成环再循环新新头节点即可 较快
class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        n = 0 
        cur = head
        while cur != None:
            cur = cur.next
            n += 1
        if n < 2:
            return head
        else:
            k = k % n 
            m = n - k
            l = m - 1
            if k == 0:
                return head
            cur = head
            while cur.next != None:
                cur = cur.next
            cur.next = head
            newhead = head
            temp = head
            while m > 0:
                newhead = newhead.next
                m -= 1
            while l > 0:
                temp = temp.next
                l -= 1
            temp.next = None
            return newhead
# eval（）执行字符串里面的表达式
# 3 链表部分的基础学习完成 下面是树部分的基础练习 如何先序遍历
    #做法一 递归 最简单的做法
    # Definition for a binary tree node.
    # class TreeNode(object):
    #     def __init__(self, val=0, left=None, right=None):
    #         self.val = val
    #         self.left = left
    #         self.right = right
    class Solution(object):
        def preorderTraversal(self, root):
            """
            :type root: TreeNode
            :rtype: List[int]
            """
            res = []
            def preorder(root):
                if root == None:
                    return
                res.append(root.val)
                preorder(root.left) 
                preorder(root.right)
            preorder(root)
            return res
    #做法二 迭代 遍历树的时候和栈先入后出十分吻合
    # Definition for a binary tree node.
    # class TreeNode(object):
    #     def __init__(self, val=0, left=None, right=None):
    #         self.val = val
    #         self.left = left
    #         self.right = right
    class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        stack = []
        node = root
        while stack or node:
            while node:
                res.append(node.val)
                stack.append(node)
                node = node.left
            node = stack.pop() 
            node = node.right
        return res
#4二叉树的中序遍历
    #递归 
    # Definition for a binary tree node.
    # class TreeNode(object):
    #     def __init__(self, val=0, left=None, right=None):
    #         self.val = val
    #         self.left = left
    #         self.right = right
    class Solution(object):
        def inorderTraversal(self, root):
            """
            :type root: TreeNode
            :rtype: List[int]
            """
            res = []
            def inorder(root):
                if root == None:
                    return
                inorder(root.left)
                res.append(root.val)
                inorder(root.right)
            inorder(root)
            return res
    #迭代
    # Definition for a binary tree node.
    # class TreeNode(object):
    #     def __init__(self, val=0, left=None, right=None):
    #         self.val = val
    #         self.left = left
    #         self.right = right
    class Solution(object):
        def inorderTraversal(self, root):
            """
            :type root: TreeNode
            :rtype: List[int]
            """
            res = []
            stack = []
            node = root
            while stack or node:  #多看这里的思路 很清晰
                while node:
                    stack.append(node)
                    node = node.left
                node = stack.pop()
                res.append(node.val)
                node = node.right
            return res
#5二叉树的后序遍历
    #递归
    # Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        def postorder(root):
            if root == None:
                return
            postorder(root.left)
            postorder(root.right)
            res.append(root.val)
        postorder(root)
        return res
    #迭代
    # Definition for a binary tree .
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if root == None:
            return
        res = []
        stack = [root]
        node = root
        while stack:
            node = stack.pop(0)
            res.insert(0,node.val)
            if node.left:
                stack.insert(0,node.left)
            if node.right:
                stack.insert(0,node.right)
        return res

    
    
