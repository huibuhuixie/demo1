#1 深拷贝带随机指针的链表
"""
# Definition for a Node.
class Node:
    def __init__(self, x, next=None, random=None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if head == None:
            return None
        cur = head
        newhead = Node(0)
        cur1 = newhead
        while cur != None:
            cur1.next = Node(cur.val)
            cur = cur.next
            cur1 = cur1.next
        cur = head
        cur1 = newhead.next
        while cur:
            index = 0
            if cur.random:
                temp1= head
                while temp1 != cur.random:
                    index += 1
                    temp1 = temp1.next
                temp2 = newhead.next
                while index > 0:
                    temp2 = temp2.next
                    index -= 1
                cur1.random = temp2
            cur = cur.next
            cur1 = cur1.next
        return newhead.next
# 2 旋转列表 先成环再循环新新头节点即可 较快
class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        n = 0 
        cur = head
        while cur != None:
            cur = cur.next
            n += 1
        if n < 2:
            return head
        else:
            k = k % n 
            m = n - k
            l = m - 1
            if k == 0:
                return head
            cur = head
            while cur.next != None:
                cur = cur.next
            cur.next = head
            newhead = head
            temp = head
            while m > 0:
                newhead = newhead.next
                m -= 1
            while l > 0:
                temp = temp.next
                l -= 1
            temp.next = None
            return newhead
# eval（）执行字符串里面的表达式
